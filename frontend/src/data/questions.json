{
    "categories": [
        {
            "id": "sorting",
            "name": "Sorting",
            "description": "Sorting algorithms and related problems"
        },
        {
            "id": "recursion",
            "name": "Recursion",
            "description": "Recursive problem solving techniques"
        },
        {
            "id": "trees",
            "name": "Trees",
            "description": "Binary trees, BSTs, and tree traversals"
        },
        {
            "id": "graphs",
            "name": "Graphs",
            "description": "Graph algorithms and traversals"
        },
        {
            "id": "dynamic-programming",
            "name": "Dynamic Programming",
            "description": "Optimization problems using DP"
        },
        {
            "id": "others",
            "name": "Others",
            "description": "Miscellaneous algorithmic problems"
        }
    ],
    "questions": {
        "sorting": [],
        "recursion": [],
        "trees": [
            {
                "id": "binary-tree-level-order",
                "title": "BFS",
                "category": "trees",
                "code": "\"\"\"\n- Task: level-order traversal  \n  - top→bottom  \n  - left→right  \n- Node: TreeNode(val,left,right)\n- Example  \n  - Tree  \n        3\n       / \\\n      9  20\n         / \\\n        15  7\n  - Output [[3],[9,20],[15,7]]\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def levelOrder(self, root) -> List[List[int]]:\n        # TODO: implement\n        pass"
            },
            {
                "id": "binary-tree-level-order-bottom",
                "title": "BFS (Bottom-Up)",
                "category": "trees",
                "code": "\"\"\"\n- Task: level-order traversal  \n  - bottom→top  \n  - left→right  \n- Node: TreeNode(val,left,right)\n- Example  \n  - Tree  \n        3\n       / \\\n      9  20\n         / \\\n        15  7\n  - Output [[15,7],[9,20],[3]]\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def levelOrderBottom(self, root) -> List[List[int]]:\n        # TODO: implement\n        pass"
            }
        ],
        "graphs": [],
        "dynamic-programming": [],
        "others": [
            {
                "id": "two-sum",
                "title": "Two Sum",
                "category": "others",
                "code": "# Two Sum\n\n\"\"\"\nGiven an array of integers nums and an integer target,\nreturn indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution,\nand you may not use the same element twice.\nYou can return the answer in any order.\n\nExample 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\"\"\"\n\ndef twoSum(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    # Your code here\n    pass"
            }
        ]
    }
}